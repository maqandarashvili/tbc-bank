<?php
namespace Dfe\TBCBank\Facade;
use Df\API\Operation;
use Dfe\TBCBank\API\Facade as F;
use Dfe\TBCBank\W\Event as Ev;
// 2018-11-09
/** @method \Dfe\TBCBank\Method m() */
final class Charge extends \Df\StripeClone\Facade\Charge {

	public $submit_url = 'https://ecommerce.ufc.ge:18443/ecomm2/MerchantHandler';

	/**
	 * 2018-11-11
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::capturePreauthorized()
	 * @used-by \Df\StripeClone\Method::charge()
	 * @param string $id
	 * @param int|float $a
	 * The $a value is already converted to the PSP currency and formatted according to the PSP requirements.
	 * @return Operation
	 */
	function capturePreauthorized($id, $a) {return F::s()->post([
		'amount' => $a
		,'trans_id' => $id
		,'client_ip_addr' => $this->tm()->req('client_ip_addr')
		,'command' => 't'
		,'currency' => df_currency_num($this->m()->cPayment())
	]);}

	/**
	 * 2018-11-14 It is used only for repetitive payments via previously saved bank cards.
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::create()
	 * @used-by \Df\StripeClone\Method::chargeNew()
	 * @param array(string => mixed) $p
	 * @return Operation
	 */
	function create(array $p) {return F::s()->post($p);}

	/**
	 * 2018-11-16
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::id()
	 * @used-by \Df\StripeClone\Method::chargeNew()
	 * @param Operation $c
	 * @return string
	 */
	function id($c) {return $c[Ev::TID];}

	/**
	 * 2018-11-09
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::pathToCard()
	 * @used-by \Df\StripeClone\Block\Info::cardDataFromChargeResponse()
	 * @used-by \Df\StripeClone\Facade\Charge::cardData()
	 * @return null
	 */
	function pathToCard() {return null;}

	/**
	 * 2018-11-09
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::refund()
	 * @used-by void()
	 * @used-by \Df\StripeClone\Method::_refund()
	 * @param string $id
	 * @param float $a
	 * В формате и валюте платёжной системы.
	 * Значение готово для применения в запросе API.
	 * @return null
	 */
	function refund($id, $a) {$this->refund_transaction($id, $a);}

	private function curl($query_string)
	{


		$ssl = BP.'/cert.pem';
		$pass = '2goU9n4kAN6nat-S';

		$curl = curl_init();

		curl_setopt($curl, CURLOPT_POSTFIELDS, $query_string);
		curl_setopt($curl, CURLOPT_VERBOSE, 1);
		curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);
		curl_setopt($curl, CURLOPT_CAINFO, $ssl);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($curl, CURLOPT_SSLCERT, $ssl);
		curl_setopt($curl, CURLOPT_SSLKEYPASSWD, $pass);
		curl_setopt($curl, CURLOPT_URL, $this->submit_url);

		$result = curl_exec($curl);

		$err = curl_error($curl);
		$info = curl_getinfo($curl);

		return $result;
	}

	public function refund_transaction($trans_id, $amount)
	{
		$post_fields = array(
			'command'         => 'k',
			'trans_id'        => $trans_id,
			'amount'          => $amount,
		);

		return $this->process($post_fields);
	}


	private function parse_result($string)
	{
		$array1 = explode(PHP_EOL, trim($string));
		$result = array();
		foreach ($array1 as $key => $value) {
			$array2 = explode(':', $value);
			$result[ $array2[0] ] = trim($array2[1]);
		}

		return $result;
	}

	private function process($post_fields)
	{
		$string = http_build_query($post_fields);
		$result = $this->curl($string);
		$parsed = $this->parse_result($result);
		// var_dump($parsed); die();
		return $parsed;
	}

	public function getTbcTransId($tnx_id){

		$transaction_id = substr($tnx_id,0,28);

		return $transaction_id;
	}

	/**
	 * 2018-11-14
	 * 1) A new token looks like «6ZysGdr05Lvo6p2ieDvg7/fzdeU=».
	 * It always consists of 28 characters and always ends with `=`.
	 * 2) A registered token looks like «4349958401».
	 * It is generated by @see df_uid()
	 * in @see \Dfe\TBCBank\Charge::pCharge().
	 * It always consists of 10 characters.
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::tokenIsNew()
	 * @used-by \Dfe\TBCBank\Init\Action::isRecurring()
	 * @param string $id
	 * @return bool
	 */
	function tokenIsNew($id) {return df_ends_with($id, '=');}

	/**
	 * 2018-11-09
	 * @override
	 * @see \Df\StripeClone\Facade\Charge::void()
	 * @used-by \Df\StripeClone\Method::_refund()
	 * @param string $id
	 * @return null
	 */
	function void($id) {return null;}
}